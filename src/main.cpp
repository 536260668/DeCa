//
// Created by 梦想家xixi on 2021/10/18.
//
#include "Mutect2/AssemblyResultSet.h"
#include "graph/Kmer.h"
#include "graph/MultiDeBruijnVertex.h"
#include "graph/ReadThreadingGraph.h"
#include "ReadThreadingGraph.h"
#include <iostream>
#include "path/AdaptiveChainPruner.h"
#include "graph/utils/GraphUtils.h"
#include "intel/smithwaterman/IntelSmithWaterman.h"
#include "graph/KBestHaplotypeFinder.h"
#include "read/CigarUtils.h"
#include "Mutect2/ReadThreadingAssembler.h"
#include "GenotypeLikelihoods.h"
#include "StringUtils.h"
#include "haplotypecaller/AssemblyRegionTrimmer.h"
#include "haplotypecaller/MutectReadThreadingAssemblerArgumentCollection.h"
//#include<string>


int main() {
    smithwaterman_initial();
    CigarOperatorUtils::initial();
    std::string name = "chr1";
    SimpleInterval ActiveRegionLoc("chr1", 10104, 10189);
    AssemblyRegion region(ActiveRegionLoc, 100);
    std::vector<SAMRecord> reads;
    uint8_t * bases = new uint8_t[50]{67,67,67,84,65,65,67,67,67,84,65,65,67,67,67,84,65,65,67,67,67,84,65,65,67,67,67,84,65,65,67,67,67,84,65,65,67,67,67,84,65,65,67,67,67,84,65,65,67,67};
    uint8_t * basesqual = new uint8_t[50]{26,26,27,28,29,33,34,35,35,37,33,35,35,34,35,35,33,34,35,35,34,37,33,35,36,34,32,37,33,34,35,33,34,33,31,31,35,35,34,34,20,20,20,20,20,13,20,20,20,20};
    reads.emplace_back(SAMRecord(bases, 50, basesqual, 50, name));
    bases = new uint8_t[100]{67,84,65,65,67,67,67,67,84,65,65,67,67,67,84,65,65,67,67,67,84,65,65,67,67,67,84,65,65,67,67,67,84,65,65,67,67,67,84,65,65,67,67,67,84,65,65,67,67,67,65,65,67,67,67,84,65,65,67,67,67,84,65,65,67,67,67,84,65,65,67,67,67,84,65,65,67,67,67,84,65,65,67,67,67,65,65,67,67,67,84,65,65,67,67,67,84,65,65,67};
    basesqual = new uint8_t[100]{27,28,23,26,30,33,34,34,35,31,35,35,35,35,36,32,35,35,35,35,37,32,35,35,35,35,36,32,35,35,35,35,37,32,35,35,20,20,20,20,20,20,20,20,20,20,20,20,20,20,35,20,31,20,20,36,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,13,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20};
    reads.emplace_back(SAMRecord(bases, 100, basesqual, 100, name));
    bases = new uint8_t[56]{65,65,67,67,67,84,65,65,67,67,67,84,65,65,67,67,67,84,65,65,67,67,67,84,65,65,67,67,67,84,65,65,67,67,67,84,65,65,67,67,67,84,65,65,67,67,67,84,65,65,67,67,67,84,65,65};
    basesqual = new uint8_t[56]{20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20};
    reads.emplace_back(SAMRecord(bases, 56, basesqual, 56, name));
    bases = new uint8_t[54]{67,67,67,84,65,65,67,67,67,84,65,65,67,67,67,84,65,65,67,67,67,84,65,65,67,67,67,84,65,65,67,67,67,84,65,65,67,67,67,84,65,65,67,67,67,84,65,65,67,67,67,84,65,65};
    basesqual = new uint8_t[54]{20,20,20,20,20,20,20,20,20,19,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20};
    reads.emplace_back(SAMRecord(bases, 54, basesqual, 54, name));
    bases = new uint8_t[90]{65,67,67,67,84,65,65,67,67,67,84,65,65,67,67,67,84,65,65,67,67,67,84,65,65,67,67,67,84,65,65,67,67,67,84,65,65,67,67,67,84,65,65,67,67,67,84,65,65,67,67,67,65,65,67,67,67,84,65,65,67,67,67,84,65,65,67,67,67,84,65,65,67,67,67,84,65,65,67,67,67,84,65,65,67,67,67,67,67,65};
    basesqual = new uint8_t[90]{27,27,27,27,31,30,34,34,35,35,36,32,35,35,35,35,36,32,35,35,35,35,36,32,35,35,35,35,37,32,35,35,35,37,36,32,34,35,35,35,35,32,36,35,36,35,36,33,36,35,35,35,36,35,31,35,36,33,32,36,28,34,35,32,28,35,33,35,29,36,32,36,31,35,34,33,33,24,33,36,35,35,21,36,34,28,33,29,17,34};
    reads.emplace_back(SAMRecord(bases, 90, basesqual, 90, name));
    bases = new uint8_t[99]{67,67,67,84,65,65,67,67,67,84,65,65,67,67,67,84,65,65,67,67,67,84,65,65,67,67,67,84,65,65,67,67,67,84,65,65,67,67,67,84,65,65,67,67,67,84,65,65,67,67,67,65,65,67,67,67,84,65,65,67,67,67,84,65,65,67,67,67,84,65,65,67,67,67,84,65,65,67,67,67,84,65,65,67,67,67,84,65,65,67,67,67,84,65,65,67,67,67,84};
    basesqual = new uint8_t[99]{27,27,27,29,29,34,35,35,35,37,33,35,35,35,35,37,33,36,35,35,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20};
    reads.emplace_back(SAMRecord(bases, 99, basesqual, 99, name));
    bases = new uint8_t[83]{67,67,67,65,65,67,67,67,84,65,65,67,67,67,84,65,65,67,67,67,84,65,65,67,67,67,84,65,65,67,67,67,65,65,67,67,67,84,65,65,67,67,67,84,65,65,67,67,67,84,65,65,67,67,67,84,65,65,67,67,67,84,65,65,67,67,67,84,65,65,67,67,67,67,84,65,65,67,67,67,84,65,65};
    basesqual = new uint8_t[83]{20,20,34,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,36,37,33,36,34,35,35,37,32,35,33,35,35,37,32,35,32,35,35,36,31,35,33,35,35,35,36,32,34,32,33,30,29,24,27,27};
    reads.emplace_back(SAMRecord(bases, 83, basesqual, 83, name));
    bases = new uint8_t[100]{67,84,65,65,67,67,67,84,65,65,67,67,67,84,65,65,67,67,67,84,65,65,67,67,67,84,65,65,67,67,67,65,65,67,67,67,84,65,65,67,67,67,84,65,65,67,67,67,84,65,65,67,67,67,84,65,65,67,67,67,84,65,65,67,67,67,84,65,65,67,67,67,84,65,65,67,67,67,84,65,65,67,67,67,84,65,65,67,67,67,84,65,65,67,67,67,84,65,65,67};
    basesqual = new uint8_t[100]{20,18,20,20,20,20,20,10,20,20,20,20,20,17,20,20,20,20,20,20,20,18,20,20,20,9,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,33,34,35,35,37,32,35,30,35,35,37,32,35,34,34,33,32,25,26,25,27};
    reads.emplace_back(SAMRecord(bases, 100, basesqual, 100, name));
    bases = new uint8_t[94]{65,67,67,67,84,65,65,67,67,67,84,65,65,67,67,67,84,65,65,67,67,67,84,65,65,67,67,67,65,65,67,67,67,84,65,65,67,67,67,84,65,65,67,67,67,84,65,65,67,67,67,84,65,65,65,67,67,84,65,65,67,67,67,84,65,65,67,67,67,67,84,65,65,67,67,67,84,65,65,67,67,67,84,65,65,67,67,67,84,65,65,67,67,67};
    basesqual = new uint8_t[94]{27,26,26,28,33,31,34,34,35,34,35,33,34,30,36,34,37,33,35,35,36,34,37,33,35,35,34,33,35,36,35,36,37,38,33,36,36,35,36,36,33,36,35,37,35,38,30,36,35,35,35,35,33,15,11,5,26,19,6,29,16,7,4,24,6,15,16,9,5,25,22,13,3,14,12,27,19,19,30,27,36,36,25,33,34,33,35,36,30,33,33,35,8,34};
    reads.emplace_back(SAMRecord(bases, 94, basesqual, 94, name));
    bases = new uint8_t[45]{65,65,67,67,67,65,65,67,67,67,84,65,65,67,67,67,84,65,65,67,67,67,84,65,65,67,67,67,84,65,65,67,67,67,84,65,65,67,67,67,84,65,65,67,67};
    basesqual = new uint8_t[45]{20,15,20,20,20,33,30,36,36,37,31,35,33,36,36,37,27,34,33,35,35,37,32,34,30,34,32,36,30,32,32,34,34,36,32,33,32,34,35,35,29,27,25,26,27};
    reads.emplace_back(SAMRecord(bases, 45, basesqual, 45,  name));
    region.setRead(reads);
    bases = new uint8_t[286]{
                             ,65,67,67,67,84,65,65,65,67,67,67,84,65,65,67,67,67,84,65,65,67,67,67,84,65,65,67,67,67,84,65,65,67,67,67,84,65,65,67,67};
    std::vector<CigarElement> cigarelement;
    cigarelement.emplace_back(CigarElement(286,M));
    Cigar* cigar = new Cigar(cigarelement);
    Haplotype* refHaplotype = new Haplotype(bases, true, 286, 500, cigar);
    uint8_t * fullReferenceWithPadding = new uint8_t[1286]{78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,
                                   78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,
                                   78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,

                                   67,71,67,65,71,71,67,71,67,65,71,65,71,65,71,71,67,71,67,71,67,67,71,67,71,67,67,71,71,67,71,67,65,71,71,67,71,67,65,71,65,71,65,71,71,67,71,67,71,67,67,71,67,71,67,67,71,71,67,71,67,65,71,71,67,71,67,65,71,65,71,65,71,71,67,71,67,71,67,67,71,67,71,67,67,71,71,67};
    ReadThreadingAssembler assembler(0, 1, 128, false, {10, 25});
    SimpleInterval refLoc = SimpleInterval("chr1", 9504, 10789);
    AssemblyResultSet* untrimmedAssemblyResult = assembler.runLocalAssembly(&region, refHaplotype, fullReferenceWithPadding, 1286, &refLoc, nullptr);
    std::set<VariantContext *, VariantContextComparator> & allVariationEvents = untrimmedAssemblyResult->getVariationEvents(1);
    (*allVariationEvents.begin())->getType();
    SAMSequenceDictionary samSequenceDictionary;
    samSequenceDictionary.addSequence(SAMSequenceRecord(name, 248956422));
    ReadThreadingAssemblerArgumentCollection* assemblerArgs = new MutectReadThreadingAssemblerArgumentCollection();
    AssemblyRegionTrimmer trimmer(assemblerArgs, &samSequenceDictionary, false, false);
    AssemblyRegionTrimmer_Result* trimmingResult = trimmer.trim(&region, allVariationEvents);

    return 0;
}

